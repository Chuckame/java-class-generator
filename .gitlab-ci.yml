image: maven:3-jdk-8

before_script:
  # Télécharge le settings.xml pour récupérer les dépendances sur notre nexus.
  - wget -q $MAVEN_SETTINGS_URL

variables:
  MAVEN_SETTINGS_URL: http://download.dev.gaio.local/maven/settings.xml
  # `Slf4jMavenTransferListener=WARN`: N'affiche pas le téléchargement des dépendances et des plugins.
  # `showDateTime`: Indique le temps passé (en millisecondes) depuis le démarrage de chaque job sur chaque ligne de log. Besoin de `--batch-mode` pour fonctionner.
  # `java.awt.headless`: Indique que la commande va être exécutée dans un environnement sans carte graphique ou sans souris/clavier.
  MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # `--errors`: Produce execution error messages.
  # `--fail-at-end`: Quand la commande échoue, ne continue pas le reste des commandes.
  # `--batch-mode`: Mode non intéractif.
  # `--show-version`: Affiche la version de maven avant chaque commande exécutée.
  MAVEN_CLI_OPTS: "--settings settings.xml --batch-mode --errors --fail-at-end --show-version"

# Ajout des stages de façon explicite.
stages:
  - build
  - test
  - report
  - package
  - deploy

# Vérifie si la version N'EST PAS en snapshot (sur master & tags)
# Donc on arrête la pipeline, une version snapshot n'a rien à faire sur ces branches
no-snapshot:
  stage: build
  only:
    - tags
    - master
  script:
    - 'mvn $MAVEN_CLI_OPTS org.apache.maven.plugins:maven-help-plugin:evaluate -Dexpression=project.version | grep "^[0-9]*\.[0-9]*\.[0-9]*$"'
    - exit $?

# Vérifie si la version est en snapshot sur toutes les branches sauf master & tags
# Donc on arrête la pipeline, une version release n'a rien à faire sur ces autres branches
require-snapshot:
  stage: build
  except:
    - tags
    - master
  script:
    - 'mvn $MAVEN_CLI_OPTS org.apache.maven.plugins:maven-help-plugin:evaluate -Dexpression=project.version | grep "^[0-9]*\.[0-9]*\.[0-9]*-SNAPSHOT$"'
    - exit $?

compile:
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS compile
  artifacts:
    expire_in: 1 hour
    paths:
      - target/

# Execution des tests, couverture de code (jacoco:report associé à la phase 'test' dans le pom)
tests:
  stage: test
  dependencies:
    - compile
  script:
    - mvn $MAVEN_CLI_OPTS test
  artifacts:
    expire_in: 1 hour
    paths:
      - docs/
      - target/

# Sonarisation
sonar-long-lived:
  stage: report
  dependencies:
    - tests
  script:
    - 'mvn $MAVEN_CLI_OPTS sonar:sonar 
            -Dsonar.branch.name=$CI_COMMIT_REF_NAME'
  only:
    - develop
    - master

sonar-short-lived:
  stage: report
  dependencies:
    - tests
  script:
    - 'mvn $MAVEN_CLI_OPTS sonar:sonar 
            -Dsonar.branch.name=$CI_COMMIT_REF_NAME
            -Dsonar.branch.target=develop'
  except:
    - develop
    - master
    - tags

# Génération des rapports (en fonction des plugins activés dans la section <reporting> du pom.xml)
reports:
  stage: report
  dependencies:
    - tests
  only:
    - tags
  script:
    - mvn $MAVEN_CLI_OPTS site
    # Permet à GitlabCI de connaitre la couverture de code.
    - cat docs/site/jacoco/index.html || echo "Aucun test"
  artifacts:
    expire_in: 1 hour
    paths:
      - docs/

# Création du jar obfusqué
jar:
  stage: package
  dependencies:
    - tests
  except:
    - master
  script:
    - mvn $MAVEN_CLI_OPTS package -Dmaven.test.skip=true
#    - 'mvn $MAVEN_CLI_OPTS com.github.wvengen:proguard-maven-plugin:proguard'
  artifacts:
    expire_in: 1 hour
    paths:
      - target/

# Déploie les artifacts (sources, javadoc et jar) sur le nexus
nexus:
  stage: deploy
  only:
    # Pour les snapshots
    - develop
    # Pour les releases
    - tags
  dependencies:
    - jar
  script:
    # 'maven.javadoc.failOnError=false' pour ne pas planter le déploiement même si la javadoc contient des erreurs.
    - 'mvn $MAVEN_CLI_OPTS javadoc:jar source:jar deploy -Dmaven.javadoc.failOnError=false -Dmaven.test.skip=true'
  # Pas de génération d'artifacts ici, car déjà envoyés dans le nexus

# Met à disposition les rapports générés dans 'Pages' de GitLab.
# 'Pages' permet d'accéder aux rapports comme sur un site web, sans avoir à télécharger les fichiers.
pages:
  stage: deploy
  dependencies:
    - reports
  only:
    - tags
  script:
    - mv docs/site public
  artifacts:
    paths:
      - public
